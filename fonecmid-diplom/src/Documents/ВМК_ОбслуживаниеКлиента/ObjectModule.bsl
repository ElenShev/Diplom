#Область ОбработчикиСобытий

Перем СохраненныеЗначенияРеквизитов; 

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	СохранитьТекущиеЗначенияРеквизитов();
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
    СоздатьУведомлениеТелеграм();
КонецПроцедуры   


Процедура ОбработкаПроведения(Отказ,Режим)

	Если Договор.ВидДоговора <> ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.ВКМ_АбонентскоеОбслуживание") Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не верный вид договора. Проверьте наличие договора абонентского обслуживания!";
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
		
	ВМК_ВыполненныеСотрудникомРаботы(Отказ);
	ЗаполнениеВыполненныхКлиентуРабот(Отказ);	
			
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СохранитьТекущиеЗначенияРеквизитов()
	
	СохраненныеЗначенияРеквизитов = Новый Структура;
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВМК_ОбслуживаниеКлиента.Дата,
			|	ВМК_ОбслуживаниеКлиента.Специалист,
			|	ВМК_ОбслуживаниеКлиента.ВремяНачалаРаботПлан,
			|	ВМК_ОбслуживаниеКлиента.ВремяОкончанияРаботПлан
			|ИЗ
			|	Документ.ВМК_ОбслуживаниеКлиента КАК ВМК_ОбслуживаниеКлиента
			|ГДЕ
			|	ВМК_ОбслуживаниеКлиента.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			СохраненныеЗначенияРеквизитов.Вставить("Дата", Выборка.Дата);
			СохраненныеЗначенияРеквизитов.Вставить("Специалист", Выборка.Специалист);
			СохраненныеЗначенияРеквизитов.Вставить("ВремяНачалаРаботПлан", Выборка.ВремяНачалаРаботПлан);
			СохраненныеЗначенияРеквизитов.Вставить("ВремяОкончанияРаботПлан", Выборка.ВремяОкончанияРаботПлан);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьУведомлениеТелеграм()

	НужноСоздатьУведомление = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		НужноСоздатьУведомление = Истина;
	ИначеЕсли СохраненныеЗначенияРеквизитов = Неопределено ИЛИ СохраненныеЗначенияРеквизитов.Количество() = 0 Тогда
		НужноСоздатьУведомление = Истина;
	Иначе
		НужноСоздатьУведомление = ИзменилисьКлючевыеРеквизиты();
	КонецЕсли;
	
	Если НужноСоздатьУведомление Тогда
		СоздатьЭлементУведомления();
	КонецЕсли;
	
КонецПроцедуры

Функция ИзменилисьКлючевыеРеквизиты()

	Возврат НачалоДня(Дата) <> НачалоДня(СохраненныеЗначенияРеквизитов.Дата)
		ИЛИ Специалист <> СохраненныеЗначенияРеквизитов.Специалист
		ИЛИ ВремяНачалаРаботПлан <> СохраненныеЗначенияРеквизитов.ВремяНачалаРаботПлан
		ИЛИ ВремяОкончанияРаботПлан <> СохраненныеЗначенияРеквизитов.ВремяОкончанияРаботПлан;
	
КонецФункции

Процедура СоздатьЭлементУведомления()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		НовыйЭлемент = Справочники.ВМК_УведомленияТГ.СоздатьЭлемент();
		
		НовыйЭлемент.Текст_Сообщения = СтрШаблон("Заявка № %1 от %2. Клиент %3. Необходимо %4. 
			|Назначенный специалист: %5. Время начала работ: %6. Время окончания работ: %7", 
			Номер, Формат(Дата, "ДФ=dd.MM.yyyy"), Клиент, ОписаниеПроблемы, Специалист, 
			Формат(ВремяНачалаРаботПлан, "ДЛФ=В"), Формат(ВремяОкончанияРаботПлан, "ДЛФ=В"));
		
		НовыйЭлемент.Записать();
		
	Исключение
		УстановитьПривилегированныйРежим(Ложь);
		ЗаписьЖурналаРегистрации("ВМК_ОшибкаСозданияУведомления", 
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.ВМК_ОбслуживаниеКлиента,
			?(ЗначениеЗаполнено(Ссылка), Ссылка, Неопределено),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;

	УстановитьПривилегированныйРежим(Ложь);
						
КонецПроцедуры

Процедура ВМК_ВыполненныеСотрудникомРаботы(Отказ)
	
		
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВМК_УсловияОплатыСотрудниковСрезПоследних.ПроцентОтРабот КАК ПроцентОтРабот
		|ИЗ
		|	РегистрСведений.ВМК_УсловияОплатыСотрудников.СрезПоследних(&Дата,) КАК ВМК_УсловияОплатыСотрудниковСрезПоследних
		|ГДЕ
		|	ВМК_УсловияОплатыСотрудниковСрезПоследних.Сотрудник = &Сотрудник";
	
	Запрос.УстановитьПараметр("Сотрудник", Специалист);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	СтавкаЧасаКлиента = Договор.ВМК_СуммаЧасаРаботы;
	Если ВыборкаДетальныеЗаписи.ПроцентОтРабот = "" Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон("Заполните знчение процента от выполненых работ у сотрудника %1", Специалист.Наименование);
		Сообщение.Сообщить();
		Отказ = Истина;
	Иначе
	ПроцентОтРабот = Число(ВыборкаДетальныеЗаписи.ПроцентОтРабот);
	Движения.ВМК_ВыполненныеСотрудникомРаботы.Записывать = Истина;
	
	Для Каждого ТекСтрокаВыполненныеРаботы из ВыполненныеРаботы Цикл
		Движение = Движения.ВМК_ВыполненныеСотрудникомРаботы.Добавить();
		Движение.Период = Дата;
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Сотрудник = Специалист;
		Движение.ЧасовКОплате = ТекСтрокаВыполненныеРаботы.ЧасыКОплатеКлиенту;
		Движение.СуммаКОплате = ТекСтрокаВыполненныеРаботы.ЧасыКОплатеКлиенту*СтавкаЧасаКлиента*ПроцентОтРабот/100;
	
	КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнениеВыполненныхКлиентуРабот(Отказ)
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВМК_ОбслуживаниеКлиента.Договор.ВМК_ДатаНачалаДоговора КАК ДатаНачалаДоговора,
		|	ВМК_ОбслуживаниеКлиента.Договор.ВМК_ДатаОкончанияДоговора КАК ДатаОкончанияДоговора,
		|	ВМК_ОбслуживаниеКлиента.Договор.ВМК_СуммаЧасаРаботы КАК СуммаЧасаРаботы,
		|	ВМК_ОбслуживаниеКлиентаВыполненныеРаботы.ЧасыКОплатеКлиенту КАК КоличествоЧасов,
		|	ВМК_ОбслуживаниеКлиента.Дата КАК ДатаДокумента
		|ИЗ
		|	Документ.ВМК_ОбслуживаниеКлиента.ВыполненныеРаботы КАК ВМК_ОбслуживаниеКлиентаВыполненныеРаботы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВМК_ОбслуживаниеКлиента КАК ВМК_ОбслуживаниеКлиента
		|		ПО (ВМК_ОбслуживаниеКлиентаВыполненныеРаботы.Ссылка = ВМК_ОбслуживаниеКлиента.Ссылка)
		|ГДЕ
		|	ВМК_ОбслуживаниеКлиента.Договор = &Договор";
		
		Запрос.УстановитьПараметр("Договор", Договор );
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
	Если ВыборкаДетальныеЗаписи.ДатаДокумента > ВыборкаДетальныеЗаписи.ДатаНачалаДоговора 
					И ВыборкаДетальныеЗаписи.ДатаДокумента < ВыборкаДетальныеЗаписи.ДатаОкончанияДоговора Тогда
		
	Движения.ВМК_ВыполненныеКлиентуРаботы.Записывать = Истина;
	
	Для Каждого ТекСтрокаВыполненныеРаботы из ВыполненныеРаботы Цикл
		Движение = Движения.ВМК_ВыполненныеКлиентуРаботы.Добавить();
		Движение.Период = Дата;
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Клиент = Клиент;
		Движение.Договор = Договор;
		Движение.КоличествоЧасов = ТекСтрокаВыполненныеРаботы.ЧасыКОплатеКлиенту;
		Движение.СуммаКОплате = ВыборкаДетальныеЗаписи.СуммаЧасаРаботы*ТекСтрокаВыполненныеРаботы.ЧасыКОплатеКлиенту;
	КонецЦикла;
	ИначеЕсли ВыборкаДетальныеЗаписи.ДатаДокумента < ВыборкаДетальныеЗаписи.ДатаНачалаДоговора Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон("Дата документа не соответствует сроку действия договора. Дата начала действия договора %1", ВыборкаДетальныеЗаписи.ДатаНачалаДоговора);
		Сообщение.Сообщить();
		Отказ = Истина;
	ИначеЕсли ВыборкаДетальныеЗаписи.ДатаДокумента > ВыборкаДетальныеЗаписи.ДатаОкончанияДоговора Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон("Дата документа не соответствует сроку действия договора. Договор окончил действие %1", ВыборкаДетальныеЗаписи.ДатаОкончанияДоговора);
		Сообщение.Сообщить();
		Отказ = Истина;	
	КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти